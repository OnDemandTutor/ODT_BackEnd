// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ODT_Repository.Entity;

#nullable disable

namespace ODT_API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240616190148_Dante")]
    partial class Dante
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ODT_Repository.Entity.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ConversationMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ConversationMessageId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BlogContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalLike")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blog");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BlogContent = "How to be a better mentor",
                            CreateDate = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3421),
                            Image = "ahihi",
                            TotalLike = 1,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.BlogComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComment");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BlogId = 1L,
                            Comment = "Great post!",
                            CreateDate = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3458),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = false,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.BlogLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogLike");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            BlogId = 1L,
                            Status = true,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("MentorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Programming"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Algorithms"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Data Structures"
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.CommentImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BlogCommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BlogCommentId");

                    b.ToTable("CommentImage");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BlogCommentId = 1L,
                            Image = "Ahihi do ngoc",
                            Status = false
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsClose")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("User2Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Conversation");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateAt = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3667),
                            Duration = new TimeSpan(0, 0, 0, 0, 0),
                            EndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsClose = false,
                            LastMessage = "Hello!",
                            User1Id = 1L,
                            User2Id = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.ConversationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("ConversationMessage");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Hello!",
                            ConversationId = 1L,
                            CreateTime = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3701),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDelete = false,
                            IsSeen = false,
                            SenderId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Major", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Major");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MajorName = "Computer Science"
                        },
                        new
                        {
                            Id = 2L,
                            MajorName = "Mathematics"
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.MeetingHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("MentorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("MeetingHistory");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Mentor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AcademicLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPlace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AcademicLevel = "Master's",
                            Skill = "Ahihi",
                            Status = "offline",
                            UserId = 3L,
                            Video = "ahihi",
                            WorkPlace = "Tech Company"
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.MentorMajor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("MajorId")
                        .HasColumnType("bigint");

                    b.Property<long>("MentorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("MentorId");

                    b.ToTable("MentorMajor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MajorId = 1L,
                            MentorId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.MessageReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ConversationMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConversationMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReaction");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConversationMessageId = 1L,
                            CreateAt = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3746),
                            ReactionType = "like",
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Money")
                        .HasColumnType("double");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3401),
                            Description = "Payment for Basic subscription",
                            Money = 9.9900000000000002,
                            PaymentCode = "PAY12345",
                            Status = true,
                            TransactionId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PermissionName = "ViewQuestions"
                        },
                        new
                        {
                            Id = 2L,
                            PermissionName = "AskQuestions"
                        },
                        new
                        {
                            Id = 3L,
                            PermissionName = "AnswerQuestions"
                        },
                        new
                        {
                            Id = 4L,
                            PermissionName = "CreateBlogs"
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            Content = "How to sort an array in C#?",
                            CreateDate = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3041),
                            Image = "ahihi",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = false,
                            StudentId = 1L,
                            TotalRating = 1
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.QuestionComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionComment");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Good question!",
                            CreateDate = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3616),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionId = 1L,
                            Status = false,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.QuestionRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionRating");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            QuestionId = 1L,
                            Status = true,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = 3L,
                            RoleName = "Student"
                        },
                        new
                        {
                            Id = 4L,
                            RoleName = "Mentor"
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PermissionId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            PermissionId = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            PermissionId = 3L,
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.StudentSubcription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrentMeeting")
                        .HasColumnType("int");

                    b.Property<int>("CurrentQuestion")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubcriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubcriptionId");

                    b.ToTable("StudentSubcription");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CurrentMeeting = 1,
                            CurrentQuestion = 0,
                            EndDate = new DateTime(2024, 7, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3174),
                            StartDate = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3172),
                            Status = true,
                            StudentId = 1L,
                            SubcriptionId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Subcription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("LimitMeeting")
                        .HasColumnType("int");

                    b.Property<int>("LimitQuestion")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SubcriptionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SubcriptionPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Subcription");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LimitMeeting = 0,
                            LimitQuestion = 0,
                            Status = true,
                            SubcriptionName = "Basic",
                            SubcriptionPrice = 9.9900000000000002
                        },
                        new
                        {
                            Id = 2L,
                            LimitMeeting = 0,
                            LimitQuestion = 0,
                            Status = true,
                            SubcriptionName = "Premium",
                            SubcriptionPrice = 19.989999999999998
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Ammount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Ammount = 9.9900000000000002,
                            CreateTime = new DateTime(2024, 6, 17, 2, 1, 45, 691, DateTimeKind.Local).AddTicks(3330),
                            Description = "Subscription payment",
                            Type = "Deposit",
                            WalletId = 1L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Avatar = "ahihi",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            Fullname = "John Doe",
                            Gender = "male",
                            IdentityCard = "ahihi",
                            Password = "hashedPassword1",
                            Phone = "123123",
                            RoleId = 3L,
                            Status = true,
                            Username = "student1"
                        },
                        new
                        {
                            Id = 2L,
                            Avatar = "ahihi",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janesmith@example.com",
                            Fullname = "Jane Smith",
                            Gender = "Gay",
                            IdentityCard = "Ahihi",
                            Password = "hashedPassword2",
                            Phone = "12312321",
                            RoleId = 4L,
                            Status = true,
                            Username = "mentor1"
                        },
                        new
                        {
                            Id = 3L,
                            Avatar = "ahihi",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alicejohnson@example.com",
                            Fullname = "Alice Johnson",
                            Gender = "Female",
                            IdentityCard = "Ahihi",
                            Password = "hashedPassword3",
                            Phone = "123123",
                            RoleId = 1L,
                            Status = true,
                            Username = "admin1"
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Balance = 100.0,
                            Status = true,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Balance = 200.0,
                            Status = false,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("ODT_Repository.Entity.Attachment", b =>
                {
                    b.HasOne("ODT_Repository.Entity.ConversationMessage", "ConversationMessage")
                        .WithMany("Attachments")
                        .HasForeignKey("ConversationMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationMessage");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Blog", b =>
                {
                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.BlogComment", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.BlogLike", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Booking", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.CommentImage", b =>
                {
                    b.HasOne("ODT_Repository.Entity.BlogComment", "BlogComment")
                        .WithMany()
                        .HasForeignKey("BlogCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogComment");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Conversation", b =>
                {
                    b.HasOne("ODT_Repository.Entity.User", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("ODT_Repository.Entity.ConversationMessage", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.MeetingHistory", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Mentor", b =>
                {
                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.MentorMajor", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("ODT_Repository.Entity.MessageReaction", b =>
                {
                    b.HasOne("ODT_Repository.Entity.ConversationMessage", "ConversationMessage")
                        .WithMany("MessageReactions")
                        .HasForeignKey("ConversationMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Order", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Question", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ODT_Repository.Entity.QuestionComment", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.QuestionRating", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.RolePermission", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Student", b =>
                {
                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.StudentSubcription", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODT_Repository.Entity.Subcription", "Subcription")
                        .WithMany()
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subcription");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Transaction", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ODT_Repository.Entity.User", b =>
                {
                    b.HasOne("ODT_Repository.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ODT_Repository.Entity.Wallet", b =>
                {
                    b.HasOne("ODT_Repository.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODT_Repository.Entity.ConversationMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("MessageReactions");
                });
#pragma warning restore 612, 618
        }
    }
}
